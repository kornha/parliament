name: Deploy iOS
on:
  push: 
    branches: [ "main" ]
    paths: 
      - 'lib/**'
      - 'ios/**'
      - '.github/workflows/ios.yaml'

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch .env file from secret
        env:
          FLUTTER_DOT_ENV: ${{ secrets.FLUTTER_DOT_ENV }}
        run: echo "${FLUTTER_DOT_ENV}" > .env

      - name: Download GoogleService-Info.plist
        env:
          GOOGLE_SERVICE_INFO_IOS: ${{ secrets.GOOGLE_SERVICE_INFO_IOS }}
        run: echo "${GOOGLE_SERVICE_INFO_IOS}" > ios/Runner/GoogleService-Info.plist
    
      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64_STG }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64_STG }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.0' # TODO: this version is static here...
          channel: 'stable'

      # Install your project's dependencies
      - run: flutter pub get

      # Build and sign the ipa using a single flutter command
      - name: Building IPA
        run: flutter build ipa --export-options-plist=ios/Runner/ExportOptionsSTG.plist
          
      # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/*.ipa

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  # Release job, upload the ipa to Firebase App Distribution
  deploy_ios:
    name: Release ipa to Firebase
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
    
    # Retrieve ipa file from GitHub artifacts
    - uses: actions/checkout@v4
    - name: Get release-ipa from artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-ipa

    # Upload ipa file to Fiebase
    - name: Upload artifact to Firebase App Distribution
      uses: wzieba/Firebase-Distribution-Github-Action@v1
      with:
        appId: ${{secrets.FIREBASE_IOS_APP_ID}}
        serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        file: political_think.ipa